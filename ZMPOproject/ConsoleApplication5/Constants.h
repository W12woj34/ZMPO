#pragma once
#include <string>
const char c_NCHAR = '\n';
const char c_APOSTROPHE = '\'';
const char c_COMA = ',';
const char c_SEMICOLON = ';';
const char c_MENU_START_SYMBOL = '(';
const char c_MENU_END_SYMBOL = ')';
const char c_COMMAND_START_SYMBOL = '[';
const char c_COMMAND_END_SYMBOL = ']';
const std::string c_N = "\n";
const std::string c_NN = "\n\n";
const std::string c_LEFT_BRACKET = "( ";
const std::string c_RIGHT_BRACKET = " )";
const std::string c_COMA_SPACE = ", ";
const std::string c_LEN = " len: ";
const std::string c_VALUES = " values: ";
const std::string c_ERROR_STRING = "Error!\n";
const std::string c_ERROR_N = "\nError!\n";
const std::string c_GIVE_NUMBER = "Give number: ";
const std::string c_GIVE_NAME = "Give name: ";
const std::string c_DEFAULT_COMMAND_N = "\ndefault command\n";
const std::string c_DEFAULT_NAME = "default name";
const std::string c_DEFAULT_COMMAND = "default command";
const std::string c_QUESTION_EDIT = "\nDID YOU WANT TO EDIT COMMAND? WRITE 'yes' TO EDIT,\n OR ANY TO RUN COMMAND\n";
const std::string c_YES = "yes";
const std::string c_ADD = "add";
const std::string c_DELETE = "delete";
const std::string c_CCOMMAND_WHAT_TO_EDIT = "\nIF YOU WANT TO ADD/CHANGE QUEST WRITE: 'add', OR IF YOU WANT TO DELETE QUEST WRITE: 'delete'\n";
const std::string c_QUEST_ADDED = "\nQUEST ADDED! BACK TO MENU\n";
const std::string c_QUEST_DELETED = "\nQUEST DELETED! BACK TO MENU\n";
const std::string c_ERROR_BACK = "\nError! BACK TO MENU\n";
const std::string c_EMPTY_COMMAND = "\nempty command\n";
const std::string c_MENU_MAIN = "Main Menu";
const std::string c_MAIN = "main";
const std::string c_MENU_INFO = "\n\nWRITE: 'back' TO EXIT FROM MENU, 'add element' TO ADD POSITION TO MENU, 'delete element' TO DELETE ELEMENT FROM MENU, \n'help'(+ command name) TO VIEW COMMAND DESCRIPTION ,OR 'search'(+ command command) TO SEEK COMMAND OF GIVEN NAME ";
const std::string c_MENU_NAME = "Name: ";
const std::string c_MENU_COMMAND = "	Command: ";
const std::string c_CMENU = "CMenu";
const std::string c_CMENU_COMMAND = "CMenuCommand";
const std::string c_GIVE_NAME_POSITION = "\nGive position name: ";
const std::string c_GIVE_NAME_COMMAND = "\nGive command name: ";
const std::string c_GIVE_DESCRIPTION_CCOMMAND = "\nGive command description: ";
const std::string c_WHICH_OBJECT_ADD = "\nWhich object you want to add? CMenu/CMenuCommand\n";
const std::string c_BACK = "back";
const std::string c_EMPTY_MENU = "\nEmpty Menu!\n";
const std::string c_COMMAND_POSITION_TO_DELETE = "Give position command to delete: ";
const std::string c_ADD_ELEMENT = "add element";
const std::string c_DELETE_ELEMENT = "delete element";
const std::string c_EMPTY = "";
const std::string c_COMMAND = "command";
const std::string c_MENU = "menu";
const std::string c_ARROW = " -> ";
const std::string c_HELP = "help ";
const std::string c_SEARCH = "search ";
const std::string c_COMMAND_ABSENCE = "Command absence!";
const std::string c_FILE_NAME = "RSave.txt";
const std::string c_SAVED = "saved!";
const std::string c_LOADED = "loaded!";
const std::string c_LACK_OF_FILE_ACCESS = "Lack of access to file";
const std::string c_NO_ROOT = "elected menu is not a root!";
const std::string c_MENU_START_SYMBOL_APOSTROPHE = "('";
const std::string c_COMA_BETWEEN_APOSTROPHE = "','";
const std::string c_APOSTROPHE_SEMICOLON = "';";
const std::string c_COMMAND_START_SYMBOL_APOSTROPHE = "['";
const std::string c_COMMAND_END_SYMBOL_APOSTROPHE = "']";
const std::string c_EXPECTED_MENU_START_SYMBOL_ON_BEGIN = "Error! Expected: '(' on the begin of file.";
const std::string c_EXPECTED_SYMBOL_NAME_END_MENU = "Error! Char expected: ' after end of menu name in: \n";
const std::string c_EXPECTED_SYMBOL_NAME_BEGIN_MENU = "Error! Char expected: ' on begin of menu name in:\n";
const std::string c_EXPECTED_SYMBOL_NAME_MENU = "Error! Absence of coma between name menu, a it's command in : \n";
const std::string c_EXPECTED_SYMBOL_COMMAND_END_MENU = "Error! Char expected: ' after end of command name in:\n";
const std::string c_EXPECTED_SYMBOL_COMMAND_BEGIN_MENU = "Error! Char expected: ' on begin of command name in:\n";
const std::string c_EXPECTED_SYMBOL_DECLARATION = "Error! Absence of semicolon after declaration of menu components in: \n";
const std::string c_EXPECTED_END_MENU = "Error! Char expected to close menu: ) lub chars opening it's child in  menu: ( [ after end of declaration menu or his child in: \n";
const std::string c_EXPECTED_SYMBOL_CHILD = "Error! Char expected: , between menu children declarations in: \n";
const std::string c_EXPECTED_SYMBOL_NAME_END_COMMAND = "Error! Char expected: ' after end of command name in: \n";
const std::string c_EXPECTED_SYMBOL_NAME_BEGIN_COMMAND = "Error! Char expected: ' on begin of command name in: \n";
const std::string c_EXPECTED_SYMBOL_NAME_COMMAND = "Error! Absence of coma between name command, a jej command in: \n";
const std::string c_EXPECTED_SYMBOL_COMMAND_END_COMMAND = "Error! Char expected: ' after end of command command in: \n";
const std::string c_EXPECTED_SYMBOL_COMMAND_BEGIN_COMMAND = "Error! Char expected: ' on begin of command command in: \n";
const std::string c_EXPECTED_SYMBOL_COMMAND_COMMAND = "Error! Absence of coma between command command and content of it's help in: \n";
const std::string c_EXPECTED_SYMBOL_HELP_END_COMMAND = "Error! Char expected: ' after end of content of command help in: \n";
const std::string c_EXPECTED_SYMBOL_HELP_BEGIN_COMMAND = "Error! Char expected: ' on begin of content command help in: \n";
const std::string c_EXPECTED_END_COMMAND = "Error! Char expected: ] after end of declaration of command in: \n";
const std::string c_UNEXPECTED_SYMBOLS = "Unexpected chars after terminated loading menu in: \n";
const std::string c_EXPECTED_INT = "Error! Expected int in: \n";
const std::string c_WRONG_CHILDREN_NUMBER = "Wrong children number in: \n";
const std::string c_SUBMENU_1 = "submenu 1";
const std::string c_SUBMENU_2 = "submenu 2";
const std::string c_SUBMENU_3 = "submenu 3";
const std::string c_SUB_1 = "sub1";
const std::string c_SUB_2 = "sub2";
const std::string c_SUB_3 = "sub3";
const std::string c_HELP_1 = "help1";
const std::string c_HELP_2 = "help2";
const std::string c_HELP_3 = "help3";
const std::string c_NAME_INT = "Algorithm int";
const std::string c_NAME_DOUBLE = "Algorithm double";
const std::string c_NAME_BOOL = "Algorithm bool";
const std::string c_INT = "int";
const std::string c_DOUBLE = "double";
const std::string c_BOOL = "bool";
const std::string c_UNDEFINED_ERROR = "Unidentified Error";
const std::string c_ERROR_CPROBLEM_NULL_COMMAND = "CProblem is nullptr";
const std::string c_ERROR_NEGATIVE_NUMBER_PROBLEM_COMMAND = "Length of the problem is 0 or less";
const std::string c_ERROR_NEGATIVE_TOURNAMENT_SIZE_COMMAND = "Tournament size is 0 or less";
const std::string c_ERROR_NEGATIVE_KNAPSACK_CAPACITY_COMMAND = "Knapsack capacity is 0 or less";
const std::string c_ERROR_NEGATIVE_MAX_ITER_COMMAND = "Max iterations is 0 or less";
const std::string c_ERROR_NEGATIVE_POP_SIZE_COMMAND = "Population size is 0 or less";
const std::string c_ERROR_WRONG_MUT_PROB_COMMAND = "Mutation probability is less than 0 or higher than 1";
const std::string c_ERROR_WRONG_CROSS_PROB_COMMAND = "Crossing probability is less than 0 or higher than 1";
const std::string c_ERROR_WRONG_TABLES_SIZE_COMMAND = "Item tables have wrong sizes";
const std::string c_ERROR_WRONG_TIME_LIMIT_COMMAND = "Item tables have wrong sizes";
const std::string c_SPACE = " ";
const std::string c_NEW_LINE = "\n";
const std::string c_COPY = "COPY";
const std::string c_CROSS = "CROSS";
const int c_ERROR = -1;
const int c_NO_ERROR = 0;
const int c_ALOT = 1000;
const int c_DEFAULT_LENGTH = 10;
const int c_HELP_LENGTH_SPACE = 5;
const int c_SEEK_LENGTH_SPACE = 7;
const double c_MAX_PERCENTAGE_DOUBLE = 100.0;
const int c_MAX_PERCENTAGE_INT = 100;
//const int c_NO_ERROR = 0;
const int c_ERROR_CPROBLEM_NULL = -1;
const int c_ERROR_NEGATIVE_NUMBER_PROBLEM = -2;
const int c_ERROR_NEGATIVE_TOURNAMENT_SIZE = -3;
const int c_ERROR_NEGATIVE_KNAPSACK_CAPACITY = -4;
const int c_ERROR_NEGATIVE_MAX_ITER= -5;
const int c_ERROR_NEGATIVE_POP_SIZE = -6;
const int c_ERROR_WRONG_MUT_PROB = -7;
const int c_ERROR_WRONG_CROSS_PROB= -8;
const int c_ERROR_WRONG_TABLES_SIZE = -9;
const int c_ERROR_WRONG_TIME_LIMIT = -10;
//const int c_ITEM_NUMBER = 20;
const double c_ITEM_1_VALUE = 4;
const double c_ITEM_2_VALUE = 10;
const double c_ITEM_3_VALUE = 12;
const double c_ITEM_4_VALUE = 50;
const double c_ITEM_5_VALUE = 17;
const double c_ITEM_6_VALUE = 20;
const double c_ITEM_7_VALUE = 28;
const double c_ITEM_8_VALUE = 33;
const double c_ITEM_9_VALUE = 36;
const double c_ITEM_10_VALUE = 40;
const double c_ITEM_11_VALUE = 50;
const double c_ITEM_12_VALUE = 55;
const double c_ITEM_13_VALUE = 59;
const double c_ITEM_14_VALUE = 61;
const double c_ITEM_15_VALUE = 66;
const double c_ITEM_16_VALUE = 68;
const double c_ITEM_17_VALUE = 73;
const double c_ITEM_18_VALUE = 1;
const double c_ITEM_19_VALUE = 82;
const double c_ITEM_20_VALUE = 90;
const double c_ITEM_1_WEIGHT = 1;
const double c_ITEM_2_WEIGHT = 2;
const double c_ITEM_3_WEIGHT = 3;
const double c_ITEM_4_WEIGHT = 4;
const double c_ITEM_5_WEIGHT = 5;
const double c_ITEM_6_WEIGHT = 6;
const double c_ITEM_7_WEIGHT = 7;
const double c_ITEM_8_WEIGHT = 8;
const double c_ITEM_9_WEIGHT = 9;
const double c_ITEM_10_WEIGHT = 10;
const double c_ITEM_11_WEIGHT = 11;
const double c_ITEM_12_WEIGHT = 12;
const double c_ITEM_13_WEIGHT = 13;
const double c_ITEM_14_WEIGHT = 14;
const double c_ITEM_15_WEIGHT = 15;
const double c_ITEM_16_WEIGHT = 16;
const double c_ITEM_17_WEIGHT = 17;
const double c_ITEM_18_WEIGHT = 18;
const double c_ITEM_19_WEIGHT = 19;
const double c_ITEM_20_WEIGHT = 20;
const double c_ITEM_1_MAX = 5;
const double c_ITEM_2_MAX = 3;
const double c_ITEM_3_MAX = 6;
const double c_ITEM_4_MAX = 9;
const double c_ITEM_5_MAX = 3;
const double c_ITEM_6_MAX = 3;
const double c_ITEM_7_MAX = 8;
const double c_ITEM_8_MAX = 3;
const double c_ITEM_9_MAX = 2;
const double c_ITEM_10_MAX = 5;
const double c_ITEM_11_MAX = 1;
const double c_ITEM_12_MAX = 7;
const double c_ITEM_13_MAX = 4;
const double c_ITEM_14_MAX = 2;
const double c_ITEM_15_MAX = 7;
const double c_ITEM_16_MAX = 4;
const double c_ITEM_17_MAX = 5;
const double c_ITEM_18_MAX = 3;
const double c_ITEM_19_MAX = 8;
const double c_ITEM_20_MAX = 1;
const double c_KNAPSACK_CAPACITY = 400;
const int c_MILI_TO_NORMAL = 1000;
const int c_MAX_TIME = 10;
const int c_MAX_ITER = 50;
const int c_POP_SIZE = 8;
const int c_TOURNAMENT_SIZE = 2;
const double c_MUT_PROB = 0.1;
const double c_CROSS_PROB = 0.6;